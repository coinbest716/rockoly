{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9b913ea66ebd947da422.hot-update.js","sources":["webpack:///./components/home-page/components/Banner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useLazyQuery, useMutation, useSubscription } from '@apollo/react-hooks';\r\nimport VisibilitySensor from 'react-visibility-sensor';\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geolocation from 'react-geolocation';\r\nimport getConfig from 'next/config';\r\nimport axios from 'axios';\r\nimport dynamic from 'next/dynamic';\r\nimport moment from 'moment';\r\nimport { firebase } from '../../../config/firebaseConfig';\r\nimport { bannerData } from '../const/BannerData';\r\nimport { toastMessage } from '../../../utils/Toast';\r\nimport { AccordionItemPanel } from 'react-accessible-accordion';\r\nimport s from '../../profile-setup/ProfileSetup.String';\r\nconst OwlCarousel = dynamic(import('react-owl-carousel3'));\r\nimport gql from 'graphql-tag';\r\nimport * as gqlTag from '../../../common/gql';\r\nimport * as util from '../../../utils/checkEmptycondition';\r\nimport {\r\n  getCustomerId,\r\n  getChefId,\r\n  chef,\r\n  chefId,\r\n  customer,\r\n  getUserTypeRole,\r\n  customerId,\r\n} from '../../../utils/UserType';\r\nimport {\r\n  getIsoDate,\r\n  getTimeOnly,\r\n  getLocalTime,\r\n  NotificationconvertDateandTime,\r\n} from '../../../utils/DateTimeFormat';\r\nimport { NavigateToBookongDetail } from './Navigation';\r\n\r\n// Carousel options\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { MAPAPIKEY } = publicRuntimeConfig;\r\n\r\nconst options = {\r\n  loop: true,\r\n  nav: true,\r\n  dots: true,\r\n  autoplayHoverPause: true,\r\n  items: 1,\r\n  smartSpeed: 750,\r\n  autoplay: true,\r\n  navText: [\"<i class='fas fa-arrow-left'></i>\", \"<i class='fas fa-arrow-right'></i>\"],\r\n};\r\n\r\n//customer\r\nconst customerDataTag = gqlTag.query.customer.profileByIdGQLTAG;\r\n//for getting customer data\r\nconst GET_CUSTOMER_DATA = gql`\r\n  ${customerDataTag}\r\n`;\r\n\r\n//chef\r\nconst chefDataTag = gqlTag.query.chef.profileByIdGQLTAG;\r\n\r\n//for getting chef data\r\nconst GET_CHEF_DATA = gql`\r\n  ${chefDataTag}\r\n`;\r\n\r\nconst listChefData = gqlTag.query.chef.listAllDetailsGQLTAG;\r\n\r\nconst GET_CHEF_LIST_DATA = gql`\r\n  ${listChefData}\r\n`;\r\n\r\n// update profile data submit for chef\r\nconst updateChefProfileSubmit = gqlTag.mutation.chef.submitForReviewGQLTAG;\r\nconst UPDATE_CHEF_PROFILE_SUBMIT = gql`\r\n  ${updateChefProfileSubmit}\r\n`;\r\n\r\nconst Banner = props => {\r\n  const [userRole, setUserRole] = useState([]);\r\n  const [display, setDisplay] = useState(false);\r\n  const [panel, setPanel] = useState(true);\r\n  const [fullAddress, setFullAddress] = useState('');\r\n  const [latitude, setLatitude] = useState(null);\r\n  const [longtitude, setLongtitude] = useState(null);\r\n  const [customerIdValue, setCustomerId] = useState(null);\r\n  const [customerProfileDetails, setCustomerProfileDetails] = useState([]);\r\n  const [chefIdValue, setChefId] = useState(null);\r\n  const [removeModal, setRemoveModal] = useState(false);\r\n  const [ProfileDetails, setProfileDetails] = useState([]);\r\n  const [chefStatusId, setChefStatusId] = useState('');\r\n  const [reason, setReason] = useState('');\r\n  const [mobileNumberVerified, setMobileNumberVerified] = useState(false);\r\n  const [emailVerified, setEmailVerified] = useState(false);\r\n  const [dateFormat, setDateFormat] = useState(null);\r\n  const [requestList, setRequestList] = useState([]);\r\n  const [star, setStar] = useState();\r\n  const [review, setReview] = useState();\r\n  const [earnings, setEarnings] = useState();\r\n  const [reviewList, setReviewList] = useState([]);\r\n  const [reservationList, setReservationList] = useState([]);\r\n  const [isRegistrationCompletedYn, setIsRegistrationCompletedYn] = useState(false);\r\n\r\n  const [getCustomerData, { data }] = useLazyQuery(GET_CUSTOMER_DATA, {\r\n    variables: { customerId: customerIdValue },\r\n    fetchPolicy: 'network-only',\r\n    onError: err => {\r\n      toastMessage('renderError', err);\r\n    },\r\n  });\r\n\r\n  const [getChefDataByProfile, chefData] = useLazyQuery(GET_CHEF_DATA, {\r\n    variables: { chefId: chefIdValue },\r\n    fetchPolicy: 'network-only',\r\n    onError: err => {\r\n      toastMessage('renderError', err);\r\n    },\r\n  });\r\n\r\n  const [getChefListByProfile, listData] = useLazyQuery(GET_CHEF_LIST_DATA, {\r\n    variables: {\r\n      chefId: chefIdValue,\r\n      dateTime: dateFormat,\r\n    },\r\n    fetchPolicy: 'network-only',\r\n    // onError: err => {\r\n    //   toastMessage('renderError', err);\r\n    // },\r\n  });\r\n\r\n  const [updateChefProfileSubmitFn, { responseForProfileSubmit }] = useMutation(\r\n    UPDATE_CHEF_PROFILE_SUBMIT,\r\n    {\r\n      onCompleted: responseForProfileSubmit => {\r\n        toastMessage('success', 'Submitted successfully');\r\n        onCloseModal();\r\n      },\r\n      onError: err => {\r\n        toastMessage('error', err);\r\n      },\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    setDisplay(true);\r\n  }, []);\r\n\r\n  //get chef id\r\n  useEffect(() => {\r\n   \r\n    //get user role\r\n    getUserTypeRole()\r\n      .then(async res => {\r\n        setUserRole(res);\r\n        if (res === customer) {\r\n          //customer user\r\n          getCustomerId(customerId)\r\n            .then(customerResult => {\r\n              setCustomerId(customerResult);\r\n            })\r\n            .catch(err => {});\r\n        } else {\r\n          getChefId(chefId)\r\n            .then(async chefResult => {\r\n              await setChefId(chefResult);\r\n            })\r\n            .catch(err => {});\r\n        }\r\n      })\r\n      .catch(err => {});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (customerIdValue) {\r\n      getCustomerData();\r\n    }\r\n  }, customerIdValue);\r\n\r\n  useEffect(() => {\r\n    setDateFormat(\r\n      moment(new Date())\r\n        .utc()\r\n        .format('YYYY-MM-DDTHH:mm:ss')\r\n    );\r\n    if (chefIdValue && dateFormat) {\r\n      getChefListByProfile();\r\n      getChefDataByProfile();\r\n    }\r\n    // else{\r\n    //   getChefListByProfile();\r\n    // }\r\n  }, chefIdValue);\r\n\r\n  // useEffect(() =>{\r\n  //   getChefListByProfile();\r\n  // },[])\r\n  useEffect(() => {\r\n    // getting customer's details\r\n    if (\r\n      util.isObjectEmpty(data) &&\r\n      util.hasProperty(data, 'customerProfileByCustomerId') &&\r\n      util.isObjectEmpty(data.customerProfileByCustomerId) &&\r\n      util.hasProperty(data.customerProfileByCustomerId, 'customerProfileExtendedsByCustomerId') &&\r\n      util.isObjectEmpty(data.customerProfileByCustomerId.customerProfileExtendedsByCustomerId)\r\n    ) {\r\n      let details = data.customerProfileByCustomerId.customerProfileExtendedsByCustomerId;\r\n      if (util.hasProperty(details, 'nodes') && util.isArrayEmpty(details.nodes)) {\r\n        setFullAddress(\r\n          details.nodes[0].customerLocationAddress ? details.nodes[0].customerLocationAddress : ''\r\n        );\r\n        setLongtitude(\r\n          details.nodes[0].customerLocationLng ? details.nodes[0].customerLocationLng : ''\r\n        );\r\n        setLatitude(\r\n          details.nodes[0].customerLocationLat ? details.nodes[0].customerLocationLat : ''\r\n        );\r\n      }\r\n    } else {\r\n      setCustomerProfileDetails([]);\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    // getting chef's details\r\n    if (\r\n      util.isObjectEmpty(chefData) &&\r\n      util.hasProperty(chefData, 'data') &&\r\n      util.isObjectEmpty(chefData.data) &&\r\n      util.hasProperty(chefData.data, 'chefProfileByChefId') &&\r\n      util.isObjectEmpty(chefData.data.chefProfileByChefId)\r\n    ) {\r\n      setProfileDetails(chefData.data.chefProfileByChefId);\r\n      let details = chefData.data.chefProfileByChefId;\r\n      setIsRegistrationCompletedYn(details.isRegistrationCompletedYn);\r\n      setChefStatusId(details.chefStatusId.trim());\r\n      console.log(\"details.chefStatusId.trim()\",details.chefStatusId.trim());\r\n      let reason = details.chefRejectOrBlockReason ? \r\n      details.chefRejectOrBlockReason : '';\r\n      setReason(reason);\r\n    } else {\r\n      setProfileDetails(null);\r\n    }\r\n  }, [chefData]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"listData OUT\",listData);\r\n    if (\r\n      util.isObjectEmpty(listData) &&\r\n      util.hasProperty(listData, 'data') &&\r\n      util.isObjectEmpty(listData.data) &&\r\n      util.hasProperty(listData.data, 'chefProfileByChefId') &&\r\n      util.isObjectEmpty(listData.data.chefProfileByChefId)\r\n    ) {\r\n      console.log(\"listData if\",listData.data.chefProfileByChefId);\r\n      let details = listData.data.chefProfileByChefId;\r\n      let request = details.outstandingRequests;\r\n      let listRequest = details.reviews;\r\n      let reservations = details.futureReservations;\r\n      if (request && request.nodes.length > 0) {\r\n        setRequestList(request.nodes);\r\n      } else {\r\n        setRequestList([]);\r\n      }\r\n      if (details.totalEarnings) {\r\n        setEarnings(details.totalEarnings);\r\n      } else {\r\n        setEarnings(0.000);\r\n      }\r\n      if (details.totalReviewCount) {\r\n        setReview(details.totalReviewCount);\r\n      } else {\r\n        setReview(0);\r\n      }\r\n      if (listRequest && listRequest.nodes.length > 0) {\r\n        setReviewList(listRequest.nodes);\r\n      } else {\r\n        setReviewList([]);\r\n      }\r\n      if (reservations && reservations.nodes.length > 0) {\r\n        setReservationList(reservations.nodes);\r\n      } else {\r\n        setReservationList([]);\r\n      }\r\n    } else{\r\n      console.log(\"listData else\",listData)\r\n      setProfileDetails(null);\r\n      setRequestList([])\r\n      setEarnings(0)\r\n      setReview(0)\r\n      setReviewList([])\r\n      setReservationList([]);\r\n    }\r\n  }, [listData]);\r\n\r\n  \r\n  //Check email and mobile number verified or not\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged(function(user) {\r\n      if (user) {\r\n        if (user.phoneNumber) {\r\n          setMobileNumberVerified(true);\r\n        }\r\n        if (user.emailVerified) {\r\n          setEmailVerified(true);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  function getLocation(location) {\r\n    if (props.getLocation) {\r\n      props.getLocation(fullAddress, latitude, longtitude);\r\n    }\r\n  }\r\n\r\n  function getCurrentLocation(lat, lon) {\r\n    if (lat && lon) {\r\n      axios\r\n        .post(`${s.GOOGLEAPI}${lat},${lon}${s.KEY}${MAPAPIKEY}`)\r\n        .then(locationData => {\r\n          if (locationData && locationData.data && locationData.data.results[0]) {\r\n            setFullAddress(locationData.data.results[0].formatted_address);\r\n            setLatitude(locationData.data.results[0].formatted_address ? lat : '');\r\n            setLongtitude(locationData.data.results[0].formatted_address ? lon : '');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          toastMessage(renderError, error.message);\r\n        });\r\n    }\r\n  }\r\n\r\n  function onClickAlert() {\r\n    console.log('onClickAlert');\r\n  }\r\n\r\n  function onClickRequest(data) {\r\n    console.log('onClickRequest');\r\n    let newData = {};\r\n    newData.chefBookingHistId = data.chefBookingHistId;\r\n    NavigateToBookongDetail(newData);\r\n  }\r\n\r\n  function onClickReviews() {\r\n    console.log('onClickReviews');\r\n  }\r\n\r\n  function onClickStats() {\r\n    console.log('onClickStats');\r\n  }\r\n\r\n  function onClickReservations() {\r\n    console.log('onClickReservations');\r\n  }\r\n\r\n  function chefBookingTime(data, type) {\r\n    if (type == 'time') {\r\n      let bookingFromTime = getTimeOnly(getLocalTime(data.chefBookingFromTime));\r\n      let bookingToTime = getTimeOnly(getLocalTime(data.chefBookingToTime));\r\n      return bookingFromTime + ' - ' + bookingToTime;\r\n    } else {\r\n      return NotificationconvertDateandTime(data.chefBookingFromTime);\r\n    }\r\n  }\r\n\r\n  async function onClickSubmit() {\r\n    if (emailVerified === true && mobileNumberVerified === true) {\r\n      let variables = {\r\n        pChefId: chefIdValue,\r\n      };\r\n      await updateChefProfileSubmitFn({\r\n        variables,\r\n      });\r\n    } else {\r\n      toastMessage('error', S.VERIFIED_ALERT);\r\n    }\r\n  }\r\n\r\n  function onCloseModal() {\r\n    try {\r\n      setRemoveModal(false);\r\n    } catch (error) {\r\n      toastMessage('renderError', error.message);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <OwlCarousel className=\"home-slides owl-carousel owl-theme\" {...options}> */}\r\n        {userRole !== 'chef' &&\r\n          display &&\r\n          bannerData &&\r\n          bannerData.map((res, index) => {\r\n            return (\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6\">\r\n                  <div className={res.class} key={index}>\r\n                    <div className=\"d-table\">\r\n                      <div className=\"d-table-cell\">\r\n                        <div className=\"container\">\r\n                          <VisibilitySensor>\r\n                            {({ isVisible }) => (\r\n                              <div className=\"main-banner-content\">\r\n                                <h1\r\n                                  className={\r\n                                    isVisible ? 'animated fadeInUp opacityOne' : 'opacityZero'\r\n                                  }\r\n                                >\r\n                                  {res.title}\r\n                                </h1>\r\n\r\n                                <p\r\n                                  className={\r\n                                    isVisible ? 'animated fadeInUp opacityOne' : 'opacityZero'\r\n                                  }\r\n                                >\r\n                                  {res.description}\r\n                                </p>\r\n                              </div>\r\n                            )}\r\n                          </VisibilitySensor>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {userRole !== 'chef' && (\r\n                  <div\r\n                    className=\"col-lg-6\"\r\n                    style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\r\n                  >\r\n                    <div className=\"location-details-model\">\r\n                      <div>\r\n                        <p className=\"location-text\">Rockoly - Find Your Chef</p>\r\n                      </div>\r\n                      <div style={{ display: 'flex', width: '95%' }}>\r\n                        <h5 style={{ color: 'black', display: 'flex', width: '67%' }}>\r\n                          <Autocomplete\r\n                            className=\"form-control inputView\"\r\n                            placeholder=\"Enter location\"\r\n                            value={fullAddress}\r\n                            onChange={event => setFullAddress(event.target.value)}\r\n                            onPlaceSelected={place => {\r\n                              setFullAddress(place.formatted_address);\r\n                              setLatitude(\r\n                                place.formatted_address ? place.geometry.location.lat() : ''\r\n                              );\r\n                              setLongtitude(\r\n                                place.formatted_address ? place.geometry.location.lng() : ''\r\n                              );\r\n                            }}\r\n                            types={['address']}\r\n                            componentRestrictions={{ country: 'us' }}\r\n                          />\r\n                        </h5>\r\n                        <Geolocation\r\n                          render={({\r\n                            fetchingPosition,\r\n                            position: { coords: { latitude, longitude } = {} } = {},\r\n                            error,\r\n                            getCurrentPosition,\r\n                          }) => (\r\n                            <div className=\"locationIconView\">\r\n                              <i\r\n                                className=\"fas fa-crosshairs\"\r\n                                id=\"current-locaton-view\"\r\n                                onClick={() => getCurrentLocation(latitude, longitude)}\r\n                              ></i>\r\n                            </div>\r\n                          )}\r\n                        />\r\n                        <button\r\n                          className=\"btn btn-primary\"\r\n                          id=\"home-search-button\"\r\n                          onClick={() => getLocation(event)}\r\n                          style={{ height: '42px', marginLeft: '20px', marginTop: '2px' }}\r\n                        >\r\n                          Search\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        {userRole === 'chef' &&\r\n          display &&\r\n          bannerData &&\r\n          bannerData.map((res, index) => {\r\n            return (\r\n              <div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-lg-5 overview\" onClick={() => onClickAlert()}>\r\n                    <h4>Alerts</h4>\r\n                    <div>\r\n                      {chefStatusId === 'PENDING' && (\r\n                        <div>\r\n                          <div className=\"statusMsg\">\r\n                            {s.PROFILE_STATUS}\r\n                            <div className=\"response-view\" style={{ paddingLeft: 5 }}>\r\n                              {' '}\r\n                              {' ' + s.REVIEW_PENDING}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"statusMsg\" id=\"failed\">\r\n                            <div className=\"response-view\">{s.REVIEW_PENDING_MSG}</div>\r\n                          </div>\r\n                          {isRegistrationCompletedYn === true && (\r\n                            <div className=\"basicInfoSubmit\">\r\n                              <button\r\n                                type=\"submit\"\r\n                                onClick={() => setRemoveModal(true)}\r\n                                className=\"btn btn-primary\"\r\n                              >\r\n                                {s.SUBMIT}\r\n                              </button>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      {chefStatusId === 'REJECTED' && (\r\n                        <div>\r\n                          <div className=\"statusMsg\">\r\n                            {s.PROFILE_STATUS}\r\n                            <div className=\"response-view\" style={{ paddingLeft: 5 }}>\r\n                              {s.REVIEW_REJECTED}\r\n                            </div>\r\n                          </div>\r\n                          {isRegistrationCompletedYn === true && (\r\n                            <div className=\"basicInfoSubmit\">\r\n                              <button\r\n                                type=\"submit\"\r\n                                onClick={() => setRemoveModal(true)}\r\n                                className=\"btn btn-primary\"\r\n                              >\r\n                                {s.SUBMIT}\r\n                              </button>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      {chefStatusId === 'SUBMITTED_FOR_REVIEW' && (\r\n                        <div>\r\n                          <div className=\"statusMsg\">\r\n                            {s.PROFILE_STATUS}\r\n                            <div className=\"response-view\" style={{ paddingLeft: 5 }}>\r\n                              {s.SUBMIT_FOR_REVIEW}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      {chefStatusId === 'APPROVED' && (\r\n                        <div>\r\n                          <div className=\"statusMsg\">\r\n                            {s.PROFILE_STATUS}\r\n                            <div className=\"response-view\">{s.PROFILE_VERIFIED}</div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      {util.isStringEmpty(reason) && (\r\n                        <div className=\"statusMsg\">\r\n                          REASON : \r\n                          <div className=\"response-view\">{reason}</div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    {emailVerified === true && (\r\n                      // <span class=\"fas fa-check tickIcon\" ></span>\r\n                      <div class=\"verificationSuccess\">Email has been Verified </div>\r\n                    )}\r\n                    {emailVerified === false && (\r\n                      <div class=\"verification\">You didn't verify your Email</div>\r\n                    )}\r\n\r\n                    {mobileNumberVerified === true && (\r\n                      <div class=\"verificationSuccess\">Mobile number has been Verified</div>\r\n                    )}\r\n                    {mobileNumberVerified === false && (\r\n                      <div class=\"verification\">You didn't verify your Mobile number</div>\r\n                      // <span class=\"fas fa-times crossIcon\" ></span>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"col-lg-6 overview scroll\">\r\n                    <h4>Request</h4>\r\n                    {requestList.length > 0 &&\r\n                      requestList.map(request => {\r\n                        return (\r\n                          <div\r\n                            className=\"request row\"\r\n                            id=\"chef-home-request\"\r\n                          >\r\n                            <div\r\n                              className=\"col-lg-3\"\r\n                              style={{ display: 'flex', flexDirection: 'column' }}\r\n                            >\r\n                              <img\r\n                                className=\"profile-pic\"\r\n                                src={request.customerProfileByCustomerId.customerPicId}\r\n                              />\r\n                              <p className=\"request-name\">\r\n                                {request.customerProfileByCustomerId.fullName}\r\n                              </p>\r\n                            </div>\r\n                            <div className=\"col-lg-5\" style={{ textAlign: 'center' }}>\r\n                              <p className=\"request-name \">\r\n                                Booking Time:{chefBookingTime(request, 'time')}\r\n                              </p>\r\n                              <p class=\"request-name\">Date:{chefBookingTime(request, 'date')}</p>\r\n                            </div>\r\n                            <button\r\n                              className=\"btn btn-primary button\"\r\n                              onClick={() => onClickRequest(request)}\r\n                            >\r\n                              View\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    {requestList.length == 0 && <h4>No past request</h4>}\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-lg-5 overview scroll\">\r\n                    <h4>Reviews</h4>\r\n                    {reviewList.length > 0 &&\r\n                      reviewList.map(review => {\r\n                        return (\r\n                          <div class=\"request row\" id=\"chef-home-request\">\r\n                            <div\r\n                              className=\"col-lg-3\"\r\n                              style={{ display: 'flex', flexDirection: 'column' }}\r\n                            >\r\n                              <img\r\n                                class=\"profile-pic\"\r\n                                src={review.customerProfileByCustomerId.customerPicId}\r\n                              />\r\n                              <p class=\"request-name\">\r\n                                {review.customerProfileByCustomerId.fullName}\r\n                              </p>\r\n                            </div>\r\n                            <div className=\"col-lg-5\" style={{ textAlign: 'center' }}>\r\n                              <p class=\"request-name\">\r\n                                Booking Time:{chefBookingTime(review, 'time')}\r\n                              </p>\r\n\r\n                              <p class=\"request-name\">Date:{chefBookingTime(review, 'date')}</p>\r\n                            </div>\r\n                            <button\r\n                              class=\"btn btn-primary button\"\r\n                              onClick={() => onClickRequest(review)}\r\n                            >\r\n                              View\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    {reviewList.length == 0 && <h4>No pending reviews</h4>}\r\n                  </div>\r\n                  {/* reviewList */}\r\n                  <div class=\"col-lg-6 overview\">\r\n                    <h4>Stats</h4>\r\n                    <h5>Earnings : $ {earnings ? earnings.toFixed(2) : '0'}</h5>\r\n                    <h5>Review Counts : {review}</h5>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-lg-5 overview scroll\">\r\n                    <h4>Reservations</h4>\r\n                    {reservationList.length > 0 &&\r\n                      reservationList.map(reservation => {\r\n                        return (\r\n                          <div class=\"request row\" id=\"chef-home-request\">\r\n                            <div\r\n                              className=\"col-lg-3\"\r\n                              style={{ display: 'flex', flexDirection: 'column' }}\r\n                            >\r\n                              <img\r\n                                class=\"profile-pic\"\r\n                                src={reservation.customerProfileByCustomerId.customerPicId}\r\n                              />\r\n                              <p class=\"request-name\">\r\n                                {reservation.customerProfileByCustomerId.fullName}\r\n                              </p>\r\n                            </div>\r\n                            <div className=\"col-lg-5\">\r\n                              <p class=\"request-name\">\r\n                                Booking Time:{chefBookingTime(reservation, 'time')}\r\n                              </p>\r\n                              <p class=\"request-name\">\r\n                                Date:{chefBookingTime(reservation, 'date')}\r\n                              </p>\r\n                            </div>\r\n                            <button\r\n                              class=\"btn btn-primary button\"\r\n                              onClick={() => onClickRequest(reservation)}\r\n                            >\r\n                              View\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    {reservationList.length == 0 && <h4>No reservations yet</h4>}\r\n                  </div>\r\n                </div>\r\n\r\n                {removeModal === true && (\r\n                  <div className={`bts-popup ${open ? 'is-visible' : ''}`} role=\"alert\">\r\n                    <div className=\"bts-popup-container\">\r\n                      <h6>Ready to submit your profile for review ?</h6>\r\n                      <p>You will be notified of your registration status within 48 hours.</p>\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => onCloseModal()}\r\n                      >\r\n                        Cancel\r\n                      </button>{' '}\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => onClickSubmit()}\r\n                      >\r\n                        Ok\r\n                      </button>\r\n                      {/* <Link href=\"#\">\r\n                          <a onClick={() => onCloseModal()} className=\"bts-popup-close\"></a>\r\n                        </Link> */}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                {/* <div className=\"d-table\">\r\n                  <div className=\"d-table-cell\">\r\n                    <div className=\"container\">\r\n                      <VisibilitySensor>\r\n                        {({ isVisible }) => (\r\n                          <div className=\"main-banner-content\">\r\n                            <h1\r\n                              className={isVisible ? 'animated fadeInUp opacityOne' : 'opacityZero'}\r\n                            >\r\n                              {res.title}\r\n                            </h1>\r\n\r\n                            <p\r\n                              className={isVisible ? 'animated fadeInUp opacityOne' : 'opacityZero'}\r\n                            >\r\n                              {res.description}\r\n                            </p>\r\n                          </div>\r\n                        )}\r\n                      </VisibilitySensor>\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n              </div>\r\n            );\r\n          })}\r\n        {/* </OwlCarousel> */}\r\n      </React.Fragment>\r\n    );\r\n  } catch (error) {\r\n    toastMessage('renderError', error.message);\r\n  }\r\n};\r\n\r\nexport default Banner;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAWA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AA0BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAzBA;AAAA;AAAA;AACA;AADA;AAkCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAjCA;AAAA;AAAA;AACA;AADA;AA0CA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AATA;AAzCA;AAAA;AAAA;AACA;AADA;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAtDA;AAAA;AAAA;AACA;AAgEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAKA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9RA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA+RA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAMA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/RA;AAAA;AACA;AA2SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AASA;AADA;AAVA;AA2BA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAfA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AADA;AAiBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAcA;AAKA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAaA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAaA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AAAA;AAOA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AAGA;AAAA;AAxFA;AA4FA;AAAA;AAIA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAQA;AAIA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAQA;AAIA;AAAA;AAMA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AACA;AAAA;AAAA;AAFA;AAQA;AAMA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAsCA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}