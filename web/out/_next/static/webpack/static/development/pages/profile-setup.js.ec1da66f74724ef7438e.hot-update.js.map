{"version":3,"file":"static/webpack/static\\development\\pages\\profile-setup.js.ec1da66f74724ef7438e.hot-update.js","sources":["webpack:///./components/shared/chef-profile/pricing-page/PriceCalculator.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/react-hooks';\r\nimport Modal from 'react-responsive-modal';\r\nimport CalculatePrice from './CalculatePrice';\r\nimport gql from 'graphql-tag';\r\nimport * as gqlTag from '../../../../common/gql';\r\nimport * as util from '../../../../utils/checkEmptycondition';\r\nimport { priceCalculator } from '../../../../utils/priceCalculator';\r\nimport { toastMessage, success, renderError, error } from '../../../../utils/Toast';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport CustomerCardList from '../../../payments/components/CustomerCardList';\r\nimport _ from 'lodash';\r\n\r\nconst listStoreTag = gqlTag.query.master.storeTypeGQLTAG;\r\n//gql to get store list\r\n\r\nconst LIST_STORE = gql`\r\n  ${listStoreTag}\r\n`;\r\n\r\n//chef\r\nconst chefDataTag = gqlTag.query.chef.profileByIdGQLTAG;\r\n\r\n//for getting chef data\r\nconst GET_CHEF_DATA = gql`\r\n  ${chefDataTag}\r\n`;\r\n\r\nconst editBooking = gqlTag.mutation.booking.createRequestGQLTAG;\r\n//for insert dish\r\nconst EDIT_BOOKING = gql`\r\n  ${editBooking}\r\n`;\r\n\r\nconst createBooking = gqlTag.mutation.booking.createGQLTAG;\r\n//for insert dish\r\nconst CREATE_BOOKING = gql`\r\n  ${createBooking}\r\n`;\r\n\r\n//Get commission value\r\nconst commissionValue = gqlTag.query.setting.getSettingValueGQLTAG;\r\nconst COMMISSION_VALUE = gql`\r\n  ${commissionValue}\r\n`;\r\n\r\nconst PriceCalculator = props => {\r\n  let sampleArray = [];\r\n  const dishesRef = useRef();\r\n  const [Isopen, setIsOpen] = useState(true);\r\n  const [ProfileDetails, setProfileDetails] = useState([]);\r\n  // const [range, setRange] = useState(null);\r\n  const [rangeMinValue, setRangeMinValue] = useState(1);\r\n  const [range, setRange] = useState();\r\n  const [PriceRange, setPrcieRange] = useState(1);\r\n  const [additionalServices, setAdditionalServices] = useState([]);\r\n  const [storeList, setStoreList] = useState([]);\r\n  const [bookingData, setBookingData] = useState([]);\r\n  const [chefRate, setChefRate] = useState();\r\n  const [savedService, setSavedService] = useState([]);\r\n  const [availableService, setAvailableService] = useState([]);\r\n\r\n  const [valuePrice, setValuePrice] = useState(null);\r\n  const [storeValue, setStoreValue] = useState(null);\r\n  const [complexityValue, setComplexity] = useState(null);\r\n  const [otherStoreValue, setOtherStoreValue] = useState(false);\r\n  const [otherStoreDecription, setOtherStoreDecription] = useState(null);\r\n  const [isvaluePresent, setIsValuePresent] = useState([]);\r\n  const [additionalServicePrice, setAdditionalServicePrice] = useState(0);\r\n\r\n  const [multiple1, setmultiple1] = useState(false);\r\n  const [multiple2, setmultiple2] = useState(false);\r\n  const [multiple3, setmultiple3] = useState(false);\r\n\r\n  const [savedRange, setSavedRange] = useState();\r\n  const [savedComplexity, setSavedComplexity] = useState();\r\n  const [savedPrice, setSavedPrice] = useState();\r\n  const [savedCommision, setSavedCommision] = useState();\r\n  const [savedStore, setSavedStore] = useState();\r\n\r\n  const [servicePercentage, setServicePercentage] = useState('1%');\r\n  const [commissionAmount, setCommissionAmount] = useState(0);\r\n  const [serviceAmount, setServiceAmount] = useState();\r\n\r\n  const [bookingSummary, setBookingSummary] = useState(null);\r\n  const [selectedDishes, setSelectedDishes] = useState([]);\r\n  const [selectedDishesId, setSelectedDishesId] = useState([]);\r\n  const [chefSavedDishes, setChefSavedDishes] = useState([]);\r\n  const [notesValue, setNotesValue] = useState('');\r\n  const [dishesMasterList, setDishesMasterList] = useState([]);\r\n  const [previousAdditinalServicePrice, setPreviousAdditinalServicePrice] = useState(null);\r\n  const [showAgreement, setShowAgreement] = useState(props.screenName === 'booking' ? true : false);\r\n\r\n  const [calculatePriceYn, setcalculatePriceYn] = useState(true);\r\n  // const [getStoreData, listData] = useLazyQuery(LIST_STORE);CREATE_BOOKING\r\n\r\n  const [getStoreData, listData] = useLazyQuery(LIST_STORE, {\r\n    onError: err => {\r\n      toastMessage('renderError', err);\r\n    },\r\n  });\r\n\r\n  const createDish = gqlTag.mutation.master.createDishTypeGQLTAG;\r\n  //for insert dish\r\n  const INSERT_DISH = gql`\r\n    ${createDish}\r\n  `;\r\n\r\n  const [bookingDataTag, bookingDataCall] = useMutation(CREATE_BOOKING, {\r\n    onCompleted: dishData => {\r\n      if (props.onClickNo) {\r\n        props.onClickNo('closeAll');\r\n      }\r\n      closePriceModal();\r\n      toastMessage(success, 'Booking created Successfully');\r\n    },\r\n    onError: err => {\r\n      toastMessage(renderError, err.message);\r\n    },\r\n  });\r\n\r\n  const [insertNewDish, { dishData }] = useMutation(INSERT_DISH, {\r\n    onCompleted: dishData => {\r\n      let masterValue = dishData.createDishTypeMaster.dishTypeMaster;\r\n      let dishList = [];\r\n      dishList = dishesMasterList;\r\n      let option = {\r\n        label: masterValue.dishTypeName,\r\n        value: masterValue.dishTypeId,\r\n      };\r\n      dishList.push(option);\r\n      setDishesMasterList(dishList);\r\n      //set selected items\r\n      let selectedItems = [];\r\n      selectedItems = selectedDishes;\r\n      selectedItems.push(option);\r\n      setSelectedDishes(selectedItems);\r\n      //set selected item's id\r\n      let selectedIds = [];\r\n      selectedIds = selectedDishesId;\r\n      selectedIds.push(masterValue.dishTypeId);\r\n      setSelectedDishesId(selectedIds);\r\n      toastMessage(success, 'Dish added');\r\n      dishesRef.current.onInputChange();\r\n    },\r\n    onError: err => {\r\n      toastMessage(renderError, err.message);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    let chefData = props.ProfileDetails;\r\n    if (\r\n      util.isObjectEmpty(chefData) &&\r\n      util.hasProperty(chefData, 'chefSpecializationProfilesByChefId') &&\r\n      util.isObjectEmpty(chefData.chefSpecializationProfilesByChefId) &&\r\n      util.isArrayEmpty(chefData.chefSpecializationProfilesByChefId.nodes) &&\r\n      util.isObjectEmpty(chefData.chefSpecializationProfilesByChefId.nodes[0])\r\n    ) {\r\n      let data = chefData.chefSpecializationProfilesByChefId.nodes[0];\r\n      setChefSavedDishes(util.isArrayEmpty(data.chefDishTypeId) ? data.chefDishTypeId : []);\r\n      // setSelectedDishesId(util.isArrayEmpty(data.chefDishTypeId) ? data.chefDishTypeId : []);\r\n    }\r\n  }, [props.ProfileDetails]);\r\n\r\n  const [bookingRequestDataTag, requestData] = useMutation(EDIT_BOOKING, {\r\n    onCompleted: data => {\r\n      // console.log('data', data);\r\n      if (props.onClickNo) {\r\n        props.onClickNo();\r\n      }\r\n      toastMessage(success, 'Booking edited Successfully');\r\n    },\r\n    onError: err => {\r\n      // toastMessage(renderError, err.message);\r\n    },\r\n  });\r\n\r\n  const [getChefDataByProfile, chefData] = useLazyQuery(GET_CHEF_DATA, {\r\n    variables: { chefId: props.chefId },\r\n    fetchPolicy: 'network-only',\r\n    onError: err => {\r\n      // toastMessage('renderError', err);\r\n    },\r\n  });\r\n\r\n  //Get commission value query\r\n  const commissionData = useQuery(COMMISSION_VALUE, {\r\n    variables: {\r\n      pSettingName: 'BOOKING_SERVICE_CHARGE_IN_PERCENTAGE',\r\n    },\r\n    onError: err => {\r\n      toastMessage('renderError', err);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      util.isObjectEmpty(commissionData) &&\r\n      util.isObjectEmpty(commissionData.data) &&\r\n      util.isStringEmpty(commissionData.data.getSettingValue)\r\n    ) {\r\n      let servicePercentage = parseFloat(commissionData.data.getSettingValue);\r\n      setServiceAmount(servicePercentage);\r\n      let servicePercentageString = `${commissionData.data.getSettingValue} %`;\r\n      setServicePercentage(servicePercentageString);\r\n      if (valuePrice) {\r\n        let commissionCost = (servicePercentage / 100) * valuePrice;\r\n        setCommissionAmount(commissionCost.toFixed(2));\r\n      } else {\r\n        let commissionCost = (servicePercentage / 100) * savedPrice;\r\n        setCommissionAmount(commissionCost.toFixed(2));\r\n      }\r\n    }\r\n  }, [commissionData, savedPrice, valuePrice]);\r\n\r\n  useEffect(() => {\r\n    let service = [];\r\n    if (\r\n      util.isObjectEmpty(chefData) &&\r\n      util.hasProperty(chefData, 'data') &&\r\n      util.isObjectEmpty(chefData.data) &&\r\n      util.hasProperty(chefData.data, 'chefProfileByChefId') &&\r\n      util.isObjectEmpty(chefData.data.chefProfileByChefId)\r\n    ) {\r\n      let detail = chefData.data.chefProfileByChefId;\r\n      setmultiple1(true);\r\n      setmultiple2(false);\r\n      setmultiple3(false);\r\n      setComplexity(1);\r\n      if (\r\n        util.hasProperty(detail, 'chefProfileExtendedsByChefId') &&\r\n        util.hasProperty(detail.chefProfileExtendedsByChefId, 'nodes')\r\n      ) {\r\n        setProfileDetails(detail.chefProfileExtendedsByChefId.nodes[0]);\r\n        if (\r\n          util.hasProperty(\r\n            detail.chefProfileExtendedsByChefId.nodes[0],\r\n            'additionalServiceDetails'\r\n          ) &&\r\n          util.isStringEmpty(detail.chefProfileExtendedsByChefId.nodes[0].additionalServiceDetails)\r\n        ) {\r\n          setAvailableService(\r\n            JSON.parse(detail.chefProfileExtendedsByChefId.nodes[0].additionalServiceDetails)\r\n          );\r\n          JSON.parse(detail.chefProfileExtendedsByChefId.nodes[0].additionalServiceDetails).map(\r\n            data => {\r\n              service.push(data.id);\r\n            }\r\n          );\r\n        } else {\r\n          setAvailableService([]);\r\n        }\r\n        //ProfileDetails.additionalServiceDetails setAvailableService\r\n      }\r\n    } else {\r\n      setProfileDetails([]);\r\n    }\r\n  }, [chefData]);\r\n\r\n  useEffect(() => {\r\n    getStoreData();\r\n  }, [props]);\r\n\r\n  useEffect(() => {\r\n    if (props.chefId) {\r\n      getChefDataByProfile();\r\n    }\r\n  }, [props.chefId]);\r\n  useEffect(() => {\r\n    calculatePrice();\r\n  }, [additionalServicePrice]);\r\n\r\n  useEffect(() => {\r\n    if (ProfileDetails) {\r\n      calculatePrice();\r\n    }\r\n  }, [complexityValue]);\r\n\r\n  useEffect(() => {\r\n    let newValue = 0;\r\n    additionalServices.map(value => {\r\n      newValue = newValue + parseInt(value.price);\r\n    });\r\n    setAdditionalServicePrice(newValue);\r\n  }, [additionalServices]);\r\n\r\n  useEffect(() => {\r\n    if (props && props.bookingDetails && props.bookingDetails.chefBookingAdditionalServices) {\r\n      let propsService = JSON.parse(props.bookingDetails.chefBookingAdditionalServices);\r\n      let newValue = 0;\r\n      propsService.map(value => {\r\n        newValue = newValue + parseInt(value.price);\r\n      });\r\n      setPreviousAdditinalServicePrice(newValue);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (ProfileDetails) {\r\n      setRange(savedRange && savedRange > 0 ? savedRange : ProfileDetails.noOfGuestsMin);\r\n      calculatePrice();\r\n    }\r\n  }, [ProfileDetails, savedRange]);\r\n\r\n  useEffect(() => {\r\n    if (range) {\r\n    }\r\n    calculatePrice();\r\n  }, [range]);\r\n\r\n  useEffect(() => {\r\n    if (storeList && storeList.length > 0) {\r\n      let newVal = [];\r\n      newVal.push(storeList[0].storeTypeId);\r\n      setStoreValue(newVal);\r\n    }\r\n  }, [storeList]);\r\n\r\n  useEffect(() => {\r\n    if (props.ProfileDetails && props.ProfileDetails.chefProfileExtendedsByChefId.nodes) {\r\n      let details = props.ProfileDetails.chefProfileExtendedsByChefId.nodes[0];\r\n      setProfileDetails(details);\r\n      if (\r\n        util.hasProperty(details, 'additionalServiceDetails') &&\r\n        util.isStringEmpty(details.additionalServiceDetails)\r\n      ) {\r\n        setAvailableService(JSON.parse(details.additionalServiceDetails));\r\n      } else {\r\n        setAvailableService([]);\r\n      }\r\n    }\r\n  }, [props.ProfileDetails]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      util.isObjectEmpty(listData) &&\r\n      util.hasProperty(listData, 'data') &&\r\n      util.isObjectEmpty(listData.data) &&\r\n      util.hasProperty(listData.data, 'allStoreTypeMasters') &&\r\n      util.isObjectEmpty(listData.data.allStoreTypeMasters) &&\r\n      util.isArrayEmpty(listData.data.allStoreTypeMasters.nodes)\r\n    ) {\r\n      setStoreList(listData.data.allStoreTypeMasters.nodes);\r\n    } else {\r\n      setStoreList([]);\r\n    }\r\n  }, [listData]);\r\n\r\n  function nextClick() {\r\n    if (complexityValue) {\r\n      if (storeValue && storeValue.length > 0) {\r\n        let values = {\r\n          noOfGuests: range !== null ? parseInt(range) : ProfileDetails.noOfGuestsMin,\r\n          complexity: complexityValue,\r\n          storeTypeIds: storeValue,\r\n          otherStoreTypes: otherStoreDecription,\r\n          additionalServices,\r\n        };\r\n      } else {\r\n        toastMessage(renderError, 'Please select a store to complete booking');\r\n      }\r\n    } else {\r\n      toastMessage(renderError, 'Please select complexity to complete booking');\r\n    }\r\n  }\r\n\r\n  function calculatePrice() {\r\n    // (baseRate * 5 + ((total no of guests - 5) * (baseRate / 2))  * complexity) + additional services\r\n    // (baseRate * no.of.guests * complexity) + additional services\r\n    if (ProfileDetails) {\r\n      let baseRate = ProfileDetails.chefPricePerHour;\r\n      let guest = range;\r\n      let complexity = complexityValue;\r\n      let additionalServices = additionalServicePrice;\r\n      let price = priceCalculator(\r\n        baseRate,\r\n        guest,\r\n        complexity,\r\n        additionalServices,\r\n        previousAdditinalServicePrice\r\n      );\r\n      setValuePrice(price);\r\n    }\r\n  }\r\n\r\n  function onSelectCheckbox(value, index) {\r\n    let newVal = JSON.parse(ProfileDetails.chefAdditionalServices);\r\n    let deleteArray = isvaluePresent;\r\n    deleteArray[index] = !isvaluePresent[index];\r\n    setAdditionalServices(deleteArray);\r\n\r\n    deleteArray.map((res, index) => {\r\n      if (res) {\r\n        let parsePrice = parseInt(newVal[index].price);\r\n        newVal[index].price = parsePrice;\r\n        sampleArray.push(newVal[index]);\r\n      }\r\n    });\r\n    setAdditionalServices(sampleArray);\r\n  }\r\n\r\n  function onChangeNotes1(e) {\r\n    let newVal = e.target.value;\r\n    if (newVal) {\r\n      setOtherStoreDecription(newVal);\r\n    } else {\r\n      setOtherStoreDecription(null);\r\n    }\r\n  }\r\n\r\n  function selectedValue(event) {\r\n    let storeVal = event.target.value.trim();\r\n    if (storeVal === 'OTHERS') {\r\n      setOtherStoreValue(true);\r\n    } else {\r\n      setOtherStoreValue(false);\r\n    }\r\n    let newVal = [];\r\n    newVal.push(event.target.value);\r\n    setStoreValue(newVal);\r\n  }\r\n\r\n  function onCheckboxClicked(value, checkbox, state, type) {\r\n    setComplexity(value);\r\n    if (type === 'multiple1') {\r\n      // checkbox(!state);\r\n      setmultiple1(true);\r\n      setmultiple2(false);\r\n      setmultiple3(false);\r\n    } else if (type === 'multiple2') {\r\n      setmultiple1(false);\r\n      setmultiple2(true);\r\n      setmultiple3(false);\r\n    } else if (type === 'multiple3') {\r\n      setmultiple1(false);\r\n      setmultiple2(false);\r\n      setmultiple3(true);\r\n    }\r\n    // checkbox(!state);\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <div>\r\n        {showAgreement === false && (\r\n          <div className=\"login-content\">\r\n            <div className=\"section-title\" id=\"booking-modal-title\">\r\n              <h2 style={{ fontSixe: '22px',marginTop: '5px',marginBottom: '5px' }}>Pricing Page</h2>\r\n            </div>\r\n            <form className=\"signup-form\">\r\n              <div className=\"form-group\">\r\n                <div style={{ display: 'flex' }}>\r\n                  <div className=\"form-group col-lg-4\" style={{ paddingLeft: '0px' }}>\r\n                    <label className=\"label\">Chef Base Rate:</label>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">$ {ProfileDetails.chefPricePerHour}</div>\r\n                </div>\r\n                <div style={{ display: 'flex' }}>\r\n                  <div className=\"form-group col-lg-4\" style={{ paddingLeft: '0px' }}>\r\n                    <label className=\"label\">Number of Guests:</label>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingRight: '2%' }}>\r\n                      <input\r\n                        style={{ marginRight: '4%', width: '100%' }}\r\n                        type=\"range\"\r\n                        min={ProfileDetails.noOfGuestsMin ? ProfileDetails.noOfGuestsMin : 1}\r\n                        max={ProfileDetails.noOfGuestsMax ? ProfileDetails.noOfGuestsMax : 150}\r\n                        value={range}\r\n                        className=\"slider\"\r\n                        id=\"myRange\"\r\n                        onChange={event => {\r\n                          event.persist();\r\n                          setRange(parseInt(event.target.value));\r\n                        }}\r\n                      ></input>\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                        <div>{ProfileDetails.noOfGuestsMin ? ProfileDetails.noOfGuestsMin : 1}</div>\r\n                        <div>{range}</div>\r\n                        <div>\r\n                          {ProfileDetails.noOfGuestsMax ? ProfileDetails.noOfGuestsMax : 150}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {util.isStringEmpty(ProfileDetails.chefComplexity) && (\r\n                  <div className=\"form-group\" id=\"bookingDetail\">\r\n                    <label className=\"label\">Select Complexity</label>\r\n                    <div>\r\n                      <div\r\n                        className=\"col-lg-12\"\r\n                        id=\"complexity-booking-modal\"\r\n                        style={{ display: 'flex' }}\r\n                      >\r\n                        {JSON.parse(ProfileDetails.chefComplexity) &&\r\n                          JSON.parse(ProfileDetails.chefComplexity).map((data, index) => {\r\n                            { console.log(\"ProfileDetails.chefComplexity\", data) }\r\n                            if (data.complexcityLevel === '1X') {\r\n                              return (\r\n                                <div className=\"col-lg-4\" id=\"availabilityRow\">\r\n                                  <div>\r\n                                    <div className=\"buy-checkbox-btn\" id=\"checkBoxView\">\r\n                                      <div className=\"item\">\r\n                                        <input\r\n                                          className=\"inp-cbx\"\r\n                                          id=\"1X\"\r\n                                          type=\"radio\"\r\n                                          name=\"radio-group1\"\r\n                                          checked={multiple1}\r\n                                          onChange={() =>\r\n                                            onCheckboxClicked(\r\n                                              1,\r\n                                              setmultiple1,\r\n                                              multiple1,\r\n                                              'multiple1'\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label className=\"cbx\" htmlFor=\"1X\">\r\n                                          <span>\r\n                                            <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                                              <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                                            </svg>\r\n                                          </span>\r\n                                          <span>1X</span>\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className=\"\" style={{ display: 'flex' }}>\r\n                                        <label style={{ marginTop: '1px' }}> Dishes : </label>\r\n                                        <p style={{ fontSize: '14px', marginLeft: '2px' }}>\r\n                                          {data.dishes ? data.dishes : ''}\r\n                                        </p>\r\n                                      </div>\r\n                                  </div>\r\n                                  <div></div>\r\n                                </div>\r\n                              );\r\n                            }\r\n                            if (data.complexcityLevel === '1.5X') {\r\n                              return (\r\n                                <div className=\"col-lg-4\" id=\"availabilityRow\">\r\n                                  <div>\r\n                                    <div className=\"buy-checkbox-btn\" id=\"checkBoxView\">\r\n                                      <div className=\"item\">\r\n                                        <input\r\n                                          className=\"inp-cbx\"\r\n                                          id=\"1.5X\"\r\n                                          type=\"radio\"\r\n                                          name=\"radio-group1\"\r\n                                          checked={multiple2}\r\n                                          style={{ marginRight: '4%' }}\r\n                                          onChange={() =>\r\n                                            onCheckboxClicked(\r\n                                              1.5,\r\n                                              setmultiple2,\r\n                                              multiple2,\r\n                                              'multiple2'\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label className=\"cbx\" htmlFor=\"1.5X\">\r\n                                          <span>\r\n                                            <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                                              <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                                            </svg>\r\n                                          </span>\r\n                                          <span>1.5X</span>\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className=\"\" style={{ display: 'flex' }}>\r\n                                        <label style={{ marginTop: '1px' }}> Dishes : </label>\r\n                                        <p style={{ fontSize: '14px', marginLeft: '2px' }}>\r\n                                          {data.dishes ? data.dishes : ''}\r\n                                        </p>\r\n                                      </div>\r\n                                  </div>\r\n                                  <div></div>\r\n                                </div>\r\n                              );\r\n                            }\r\n                            if (data.complexcityLevel === '2X') {\r\n                              return (\r\n                                <div className=\"col-lg-4\" id=\"availabilityRow\">\r\n                                  <div>\r\n                                    <div className=\"  buy-checkbox-btn\" id=\"checkBoxView\">\r\n                                      <div className=\"item\">\r\n                                        <input\r\n                                          className=\"inp-cbx\"\r\n                                          id=\"2X\"\r\n                                          type=\"radio\"\r\n                                          name=\"radio-group1\"\r\n                                          checked={multiple3}\r\n                                          onChange={() =>\r\n                                            onCheckboxClicked(\r\n                                              2,\r\n                                              setmultiple3,\r\n                                              multiple3,\r\n                                              'multiple3'\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label className=\"cbx\" htmlFor=\"2X\">\r\n                                          <span>\r\n                                            <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                                              <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                                            </svg>\r\n                                          </span>\r\n                                          <span>2X</span>\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className=\"\" style={{ display: 'flex' }}>\r\n                                        <label style={{ marginTop: '1px' }}> Dishes : </label>\r\n                                        <p style={{ fontSize: '14px', marginLeft: '2px' }}>\r\n                                          {data.dishes ? data.dishes : ''}\r\n                                        </p>\r\n                                      </div>\r\n                                  </div>\r\n                                  <div></div>\r\n                                </div>\r\n                              );\r\n                            }\r\n                          })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                {availableService.length > 0 && (\r\n                  <div className=\"form-group\" id=\"bookingDetail\">\r\n                    <label className=\"label\">Select Additional Services Provided by Chef</label>\r\n                    {availableService.map((data, index) => {\r\n                      return (\r\n                        <div>\r\n                          <div className=\"col-lg-12\" style={{ display: 'flex' }}>\r\n                            <div className=\"col-lg-6\">\r\n                              <div\r\n                                className=\"buy-checkbox-btn\"\r\n                                id=\"checkBoxView\"\r\n                                style={{ display: 'flex' }}\r\n                              >\r\n                                <div className=\"item\">\r\n                                  <input\r\n                                    className=\"inp-cbx\"\r\n                                    id={data.name}\r\n                                    type=\"checkbox\"\r\n                                    checked={\r\n                                      savedService.includes(data.id)\r\n                                        ? savedService.includes(data.id)\r\n                                        : undefined\r\n                                    }\r\n                                    onClick={() => onSelectCheckbox(data, index)}\r\n                                  />\r\n                                  <label className=\"cbx\" htmlFor={data.name}>\r\n                                    <span>\r\n                                      <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                                        <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                                      </svg>\r\n                                    </span>\r\n                                    <span>\r\n                                      <p\r\n                                        style={{\r\n                                          textTransform: 'capitalize !important',\r\n                                        }}\r\n                                      >\r\n                                        {data.name}\r\n                                      </p>\r\n                                    </span>\r\n                                  </label>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                              <label>$ {data.price}</label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <br />\r\n              {/* <span>\r\n                You will be provided with receipt for the cost of ingredients by your chef from\r\n                following stores.\r\n                </span>\r\n              <br /> */}\r\n              {/* <div className=\"form-group\">\r\n                <div className=\"modal-containar-view\" style={{ display: 'flex' }}>\r\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <label for=\"sel1\" style={{ width: 'max-content' }}>\r\n                      Select Store\r\n                      </label>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <select\r\n                      className=\"form-control\"\r\n                      id=\"sel1\"\r\n                      onChange={event => {\r\n                        event.persist();\r\n                        selectedValue(event);\r\n                      }}\r\n                    >\r\n                      {storeList &&\r\n                        storeList.map(store => {\r\n                          return <option value={store.storeTypeId}>{store.storeTypeDesc}</option>;\r\n                        })}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <br />\r\n              </div>\r\n              {otherStoreValue === true && (\r\n                <div className=\"form-group\" style={{ display: 'flex' }}>\r\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <label className=\"label\" style={{ width: 'max-content' }}>\r\n                      Mention store\r\n                      </label>\r\n                  </div>\r\n                  <textarea\r\n                    style={{ border: '1px solid' }}\r\n                    type=\"text\"\r\n                    className=\"form-control booking_notes\"\r\n                    placeholder={'Please specify other shop name'}\r\n                    rows=\"2\"\r\n                    id=\"notes2\"\r\n                    name=\"notes2\"\r\n                    required={false}\r\n                    value={otherStoreDecription}\r\n                    onChange={e => onChangeNotes1(e)}\r\n                    data-error=\"Enter store name\"\r\n                    style={{ width: 'max-content' }}\r\n                  />\r\n                </div>\r\n              )} */}\r\n            </form>\r\n            {/* <div className=\"save-button-modal\">\r\n              <div>\r\n\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  id=\"submit-modal-button\"\r\n                  onClick={() => nextClick()}\r\n                >\r\n                  Calculate\r\n                    </button>\r\n              </div>\r\n            </div> */}\r\n            <br />\r\n            {calculatePriceYn && (\r\n              <CalculatePrice\r\n                ProfileDetails={ProfileDetails}\r\n                guest={range}\r\n                complexity={complexityValue}\r\n                chefId={props.chefId}\r\n                additionalServices={additionalServices}\r\n                screen=\"profile\"\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    //console.log('error', error);\r\n  }\r\n};\r\n\r\nexport default PriceCalculator;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAmDA;AACA;AACA;AAHA;AAlDA;AAAA;AAAA;AACA;AAuDA;AACA;AACA;AACA;AA3DA;AA+DA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AA9DA;AAAA;AAAA;AACA;AADA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA3EA;AAAA;AAAA;AACA;AAuGA;AACA;AACA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AAtHA;AAwHA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAVA;AAvHA;AAAA;AAAA;AACA;AADA;AAqIA;AAAA;AAAA;AACA;AACA;AAEA;AALA;AApIA;AAAA;AAAA;AACA;AACA;AA2IA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AASA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAOA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAeA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AAgBA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAeA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AATA;AAWA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AADA;AADA;AAYA;AAAA;AAMA;AA0EA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}