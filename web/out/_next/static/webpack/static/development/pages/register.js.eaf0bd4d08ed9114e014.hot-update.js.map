{"version":3,"file":"static/webpack/static\\development\\pages\\register.js.eaf0bd4d08ed9114e014.hot-update.js","sources":["webpack:///./components/auth/register/components/RegisterForm.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport Link from 'next/link';\r\nimport ModernDatepicker from 'react-modern-datepicker';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { firebase } from '../../../../config/firebaseConfig';\r\nimport Login from '../../SocialLogins';\r\nimport s from '../../Auth.String';\r\nimport { SignupToCustomer, SignupToChef, SharedProfile } from './Navigation';\r\nimport { toastMessage } from '../../../../utils/Toast';\r\nimport { StoreInLocal } from '../../../../utils/LocalStorage';\r\nimport Loader from '../../../Common/loader';\r\nimport * as gqlTag from '../../../../common/gql';\r\nimport { chef, customer, getCustomerAuthData, getChefAuthData } from '../../../../utils/UserType';\r\nimport { isStringEmpty, isNumberEmpty, isObjectEmpty } from '../../../../utils/checkEmptycondition';\r\nimport MobileNumberVerification from '../../../shared/mobile-number-verification/MobileNumberVerification';\r\nimport { logOutUser } from '../../../../utils/LogOut';\r\nimport { createApolloClient } from '../../../../apollo/apollo';\r\n\r\nconst updateAuthentication = gqlTag.mutation.auth.authtenticateGQLTAG;\r\n\r\nconst REGISTER_AUTH = gql`\r\n  ${updateAuthentication}\r\n`;\r\n\r\n// Create apollo client\r\nconst apolloClient = createApolloClient();\r\n\r\nexport default function RegisterForm() {\r\n  // In order to gain access to the child component instance,\r\n  // you need to assign it to a `ref`, so we call `useRef()` to get one\r\n  const childRef = useRef();\r\n  // Declare a new state variable\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [mobileNumber, setMobileNumber] = useState('');\r\n  const [icEye1, setIcEye1] = useState('fa fa-eye-slash');\r\n  const [icEye2, setIcEye2] = useState('fa fa-eye-slash');\r\n  const [passwordIcon1, setPasswordIcon1] = useState(true);\r\n  const [passwordIcon2, setPasswordIcon2] = useState(true);\r\n  const [loader, setLoader] = useState(false);\r\n  const [chefUser, setChefUser] = useState(null);\r\n  const [showCustomer, setShowCustomer] = useState(null);\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [referral, setReferred] = useState(null);\r\n\r\n\r\n  //mutation query\r\n\r\n  const [registerAuthMutation, { data, loading, error }] = useMutation(REGISTER_AUTH, {\r\n    onError: err => {\r\n      logOutUser()\r\n        .then(result => { })\r\n        .catch(error => {\r\n          toastMessage('renderError', error);\r\n        });\r\n      toastMessage('renderError', err.message);\r\n    },\r\n  });\r\n  if (error) {\r\n    toastMessage('error', error);\r\n  }\r\n\r\n  useEffect(() => {\r\n    try {\r\n      setAuthData(data);\r\n    } catch (error) {\r\n      toastMessage('renderError', error.message);\r\n    }\r\n  }, [data]);\r\n\r\n  async function checkMobileAndEmailDataExist(emailData, mobileData) {\r\n    let mobile = mobileData.replace(' ', '');\r\n    mobile = mobile.replace(' ', '');\r\n    //Query for check mobile number exist or not\r\n    let data = {\r\n      pEmail: emailData ? emailData : '',\r\n      pMobileNo: mobileData ? mobile : '',\r\n    };\r\n    //get value form db\r\n    const mobileValueCheckTag = gqlTag.query.auth.checkEmailAndMobileNoExistsGQLTAG;\r\n    let output = await apolloClient\r\n      .query({\r\n        query: gql`\r\n          ${mobileValueCheckTag}\r\n        `,\r\n        variables: data,\r\n      })\r\n      .then(result => {\r\n        return true;\r\n      })\r\n      .catch(error => {\r\n        toastMessage('renderError', error.message);\r\n        return false;\r\n      });\r\n    return output;\r\n  }\r\n\r\n  async function setAuthData(data) {\r\n    if (data !== undefined) {\r\n      if (isObjectEmpty(data.authenticate) && isObjectEmpty(data.authenticate.data)) {\r\n        //for customer login\r\n        if (chefUser === false) {\r\n          getCustomerAuthData(data.authenticate.data)\r\n            .then(async customerRes => {\r\n              StoreInLocal('user_ids', customerRes);\r\n              StoreInLocal('user_role', customer);\r\n              toastMessage('success', 'Registered Successfully');\r\n              // SignupToCustomer();\r\n              await SharedProfile();\r\n            })\r\n            .catch(error => {\r\n              toastMessage('renderError', error.message);\r\n            });\r\n        }\r\n        //for chef login\r\n        else {\r\n          getChefAuthData(data.authenticate.data)\r\n            .then(async chefRes => {\r\n              StoreInLocal('user_ids', chefRes);\r\n              StoreInLocal('user_role', chef);\r\n              toastMessage('success', 'Registered Successfully');\r\n              await SharedProfile();\r\n            })\r\n            .catch(error => {\r\n              toastMessage('renderError', error.message);\r\n            });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    //Callback function from mobile number verification\r\n    const mobileData = await childRef.current.getMobileNumberValue();\r\n\r\n    const checkMobileNumberAndEmail = await checkMobileAndEmailDataExist(\r\n      email,\r\n      mobileData.mobileNumber\r\n    );\r\n    if (checkMobileNumberAndEmail === true) {\r\n      // if (mobileData.mobileNumber === mobileData.mobileCallBackValue) {\r\n      if (password === confirmPassword) {\r\n        await signupAction(mobileData);\r\n      } else {\r\n        toastMessage('error', 'Password should match');\r\n      }\r\n      // } else {\r\n      //   toastMessage('error', 'Please verify your phone number');\r\n      // }\r\n    }\r\n  }\r\n\r\n  //On submit\r\n  function signupAction(mobileData) {\r\n    if (mobileData && mobileData.mobileNumberValue && mobileData.countryCode) {\r\n      try {\r\n        setLoader(true);\r\n        let userDetail = {\r\n          firstname: firstName ? firstName : null,\r\n          lastname: lastName ? lastName : null,\r\n          dob: dob ? dob : null,\r\n          mobileNumber: mobileData.mobileNumberValue ? mobileData.mobileNumberValue : null,\r\n          mobileCountryCode: mobileData.countryCode ? mobileData.countryCode : null,\r\n         };\r\n         if(chefUser){\r\n          userDetail.pChefReferralEmail = referral;\r\n        }\r\n        firebase\r\n          .auth()\r\n          .createUserWithEmailAndPassword(email, password)\r\n          .then(user => {\r\n            const currentUser = firebase.auth().currentUser;\r\n            currentUser.getIdToken().then(data => {\r\n              if (currentUser !== null && data) {\r\n                let variables = {\r\n                  token: data,\r\n                  roleType: chefUser === true ? 'CHEF' : 'CUSTOMER',\r\n                  authenticateType: 'REGISTER',\r\n                  extra: JSON.stringify(userDetail),\r\n                };\r\n                registerAuthMutation({ variables });\r\n                setLoader(false);\r\n                StoreInLocal('current_user_token', data);\r\n              } else {\r\n                setLoader(false);\r\n                toastMessage('error', 'The current user is not available');\r\n              }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            setLoader(false);\r\n            const errorCode = error.code;\r\n            const errorMessage = error.message;\r\n            switch (errorCode) {\r\n              case 'auth/invalid-email':\r\n                // do something\r\n                toastMessage('error', 'The email address is not valid');\r\n                break;\r\n              case 'auth/wrong-password':\r\n                toastMessage('error', 'Wrong username or password');\r\n                break;\r\n              case 'auth/user-not-found':\r\n                toastMessage('error', 'User not found');\r\n                break;\r\n              default:\r\n                toastMessage('error', errorMessage);\r\n              // handle other codes ...\r\n            }\r\n          });\r\n      } catch (error) {\r\n        toastMessage('renderError', error.message);\r\n      }\r\n    } else {\r\n      toastMessage('error', 'Please enter mobile number with country code');\r\n    }\r\n  }\r\n\r\n  function onSelectButtonTypeClick(value) {\r\n    setShowCustomer(value);\r\n    if (value === true) {\r\n      setChefUser(false);\r\n    } else {\r\n      setChefUser(true);\r\n    }\r\n  }\r\n\r\n  //common setState function\r\n  function onChangeValue(value, setState) {\r\n    setState(value);\r\n  }\r\n\r\n  // Eye Icon visibility\r\n  function changePwdType1() {\r\n    if (passwordIcon1) {\r\n      setIcEye1('fa fa-eye');\r\n      setPasswordIcon1(false);\r\n    } else {\r\n      setIcEye1('fa fa-eye-slash');\r\n      setPasswordIcon1(true);\r\n    }\r\n  }\r\n\r\n  function changePwdType2() {\r\n    if (passwordIcon2) {\r\n      setIcEye2('fa fa-eye');\r\n      setPasswordIcon2(false);\r\n    } else {\r\n      setIcEye2('fa fa-eye-slash');\r\n      setPasswordIcon2(true);\r\n    }\r\n  }\r\n\r\n  //loader\r\n  function renderLoader() {\r\n    if ((loading !== undefined && loading === true) || loader === true) {\r\n      return (\r\n        <div>\r\n          <Loader />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function onClickingCheckbox() {\r\n    setIsClicked(!isClicked);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showCustomer === null && (\r\n        <div className=\"register_type row\">\r\n          <div\r\n            onClick={() => onSelectButtonTypeClick(false)}\r\n            className=\"chef_register_type col-lg-2 col-md-12 col-sm-12\"\r\n          >\r\n            <div className=\"chef_register_type_card card\">\r\n              <img\r\n                className=\"chef_register_type_card_img\"\r\n                src={require('../../../../images/noun_chef_white.png')}\r\n                alt=\"image\"\r\n              />\r\n              <div className=\"chef_register_type_card_div\">\r\n                <b className=\"chef_register_type_card_div_name\">Are you a private chef?</b>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            onClick={() => onSelectButtonTypeClick(true)}\r\n            className=\"customer_register_type col-lg-2 col-md-12 col-sm-12\"\r\n          >\r\n            <div className=\"customer_register_type_card card\">\r\n              <img\r\n                className=\"customer_register_type_card_img\"\r\n                src={require('../../../../images/customer_white.png')}\r\n                alt=\"image\"\r\n              />\r\n              <div className=\"customer_register_type_card_div\">\r\n                <b className=\"customer_register_type_card_div_name\">\r\n                  Are you looking for a private chef?\r\n                </b>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showCustomer !== null && (\r\n        <section className=\"login-area ptb-60\">\r\n          <ToastContainer />\r\n          <div className=\"container\" id=\"register-content\">\r\n            <div className=\"\">\r\n              <div className=\"col-lg-12 col-md-12\">\r\n                <div className=\"login-content\">\r\n                  <div className=\"section-title\">\r\n                    <h2>\r\n                      <span className=\"dot\"></span> Register\r\n                    </h2>\r\n                  </div>\r\n\r\n                  <form className=\"login-form\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                      <label>{s.FIRST_NAME}</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className={s.FORM_CONTROL}\r\n                        placeholder={s.FIRST_NAME_PLACEHOLDER}\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        data-error=\"Please enter first name\"\r\n                        value={firstName}\r\n                        onChange={event => onChangeValue(event.target.value, setFirstName)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>{s.LAST_NAME}</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className={s.FORM_CONTROL}\r\n                        required\r\n                        placeholder={s.LAST_NAME_PLACEHOLDER}\r\n                        id=\"lname\"\r\n                        name=\"lname\"\r\n                        value={lastName}\r\n                        onChange={event => onChangeValue(event.target.value, setLastName)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>{s.EMAIL}</label>\r\n                      <input\r\n                        type={s.EMAIL_INPUT}\r\n                        className={s.FORM_CONTROL}\r\n                        required\r\n                        placeholder={s.EMAIL_PLACEHOLDER}\r\n                        id={s.EMAIL_INPUT}\r\n                        name={s.EMAIL_INPUT}\r\n                        value={email}\r\n                        onChange={event => onChangeValue(event.target.value, setEmail)}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* <div className=\"form-group\">\r\n                    <label>{s.DOB}</label>\r\n                    <br />\r\n                    <ModernDatepicker\r\n                      date={dob}\r\n                      format={'MM-DD-YYYY'}\r\n                      showBorder\r\n                      className={s.FORM_CONTROL}\r\n                      maxDate={new Date()}\r\n                      onChange={event => onChangeValue(event, setDob)}\r\n                      placeholder={'Select a date'}\r\n                      color={'#d9b44a'}\r\n                    />\r\n                  </div> */}\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>{s.PASSWORD}</label>\r\n                      <div className=\"eyeIconView\">\r\n                        <input\r\n                          type={passwordIcon1 ? s.PASSWORD_INPUT : s.TEXT}\r\n                          required\r\n                          minLength=\"6\"\r\n                          className={s.FORM_CONTROL}\r\n                          placeholder={s.PASSWORD_PLACEHOLDER}\r\n                          id={s.PASSWORD_INPUT}\r\n                          name={s.PASSWORD_INPUT}\r\n                          value={password}\r\n                          onChange={event => onChangeValue(event.target.value, setPassword)}\r\n                        />\r\n                        <span>\r\n                          <i className={icEye1} onClick={() => changePwdType1()}></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>{s.CONFIRM_PASSWORD}</label>\r\n                      <div className=\"eyeIconView\">\r\n                        <input\r\n                          type={passwordIcon2 ? s.PASSWORD_INPUT : s.TEXT}\r\n                          required\r\n                          minLength=\"6\"\r\n                          className={s.FORM_CONTROL}\r\n                          placeholder={s.CONFIRM_PASSWORD_PLACEHOLDER}\r\n                          name={s.PASSWORD_INPUT}\r\n                          value={confirmPassword}\r\n                          onChange={event => onChangeValue(event.target.value, setConfirmPassword)}\r\n                        />\r\n                        <i className={icEye2} onClick={() => changePwdType2()}></i>\r\n                      </div>\r\n                      <p>\r\n                        <b>(password must contain at least 6 characters)</b>\r\n                      </p>\r\n                    </div>\r\n\r\n\r\n\r\n                    <MobileNumberVerification\r\n                      screen={'register1'}\r\n                      ref={childRef}\r\n                      mobileNumber={mobileNumber}\r\n                    />\r\n                    {chefUser &&\r\n                      <div className=\"form-group\">\r\n                        <label>Referred By:</label>\r\n                        <input\r\n                          type=\"email\"\r\n                          className={s.FORM_CONTROL}\r\n                          placeholder=\"Enter referred person's email\"\r\n                          name=\"referrel\"\r\n                          value={referral}\r\n                          onChange={event => onChangeValue(event.target.value, setReferred)}\r\n                        />\r\n                      </div>\r\n                    }\r\n                    {/* <div className=\"login-keep\">\r\n                    <div className=\"buy-checkbox-btn\" chefUser>\r\n                      <div className=\"item\">\r\n                        <input\r\n                          className=\"inp-cbx\"\r\n                          id=\"userType\"\r\n                          type=\"checkbox\"\r\n                          checked={chefUser}\r\n                          onChange={event => setChefUser(event.target.checked)}\r\n                        />\r\n                        <label className=\"cbx\" htmlFor=\"userType\">\r\n                          <span>\r\n                            <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                              <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                            </svg>\r\n                          </span>\r\n                          <span>{s.ARE_YOU_CHEF}</span>\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div> */}\r\n                    <div className=\"buy-checkbox-btn\">\r\n                      <div className=\"item\">\r\n                        <input className=\"inp-cbx\" id=\"login\" type=\"checkbox\"\r\n                          checked={isClicked}\r\n                          onChange={() => onClickingCheckbox()}\r\n                        />\r\n                        <label className=\"cbx\" htmlFor=\"login\">\r\n                          <span>\r\n                            <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                              <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                            </svg>\r\n                          </span>\r\n                          <p class=\"terms\" id=\"keep-me-login\">By clicking the checkbox,you agree to our\r\n                          <Link href='/terms-and-conditions'>Terms and Conditions</Link> and you have read our\r\n                          <Link href='/privacy-policy'>Privacy Policy</Link>\r\n                          </p>\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    {renderLoader()}\r\n                    {console.log(\"isClicked\", isClicked)}\r\n                    {isClicked &&\r\n                      <button type=\"submit\" className=\"btn btn-primary\">\r\n                        Register\r\n                    </button>\r\n                    }\r\n\r\n                  </form>\r\n                </div>\r\n              </div>\r\n              {isClicked &&\r\n                <div>\r\n                  <div className=\"col-lg-12 col-md-12\" id=\"socialLoginContainer\">\r\n                    <p className=\"orFont\">or</p>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-12 col-md-12\" id=\"socialLoginContainer\">\r\n                    <div>\r\n                      <Login\r\n                        sourceType={'REGISTER'}\r\n                        userType={chefUser === true ? 'CHEF' : 'CUSTOMER'}\r\n                        checkMobileAndEmailDataExist={checkMobileAndEmailDataExist}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              }\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AA0BA;AACA;AAGA;AACA;AACA;AACA;AARA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA+CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AATA;AAAA;AAYA;AAGA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAxBA;AAUA;AAVA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/CA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0EA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAZA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1EA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AA4GA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5GA;AAAA;AACA;AAmIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AASA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAaeA;;;;A","sourceRoot":""}